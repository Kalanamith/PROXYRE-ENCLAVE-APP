// This file is generated by rust-protobuf 3.0.3. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]
#![allow(renamed_and_removed_lints)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `transform.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_2;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proxy_reencyption.proto.PublicKey)
pub struct PublicKey {
    // message fields
    // @@protoc_insertion_point(field:proxy_reencyption.proto.PublicKey.x)
    pub x: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:proxy_reencyption.proto.PublicKey.y)
    pub y: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:proxy_reencyption.proto.PublicKey.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PublicKey {
    fn default() -> &'a PublicKey {
        <PublicKey as ::protobuf::Message>::default_instance()
    }
}

impl PublicKey {
    pub fn new() -> PublicKey {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "x",
            |m: &PublicKey| { &m.x },
            |m: &mut PublicKey| { &mut m.x },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "y",
            |m: &PublicKey| { &m.y },
            |m: &mut PublicKey| { &mut m.y },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PublicKey>(
            "PublicKey",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PublicKey {
    const NAME: &'static str = "PublicKey";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.x = is.read_bytes()?;
                },
                18 => {
                    self.y = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.x.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.x);
        }
        if !self.y.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.y);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.x.is_empty() {
            os.write_bytes(1, &self.x)?;
        }
        if !self.y.is_empty() {
            os.write_bytes(2, &self.y)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PublicKey {
        PublicKey::new()
    }

    fn clear(&mut self) {
        self.x.clear();
        self.y.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PublicKey {
        static instance: PublicKey = PublicKey {
            x: ::std::vec::Vec::new(),
            y: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PublicKey {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PublicKey").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PublicKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PublicKey {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proxy_reencyption.proto.TransformObject)
pub struct TransformObject {
    // message fields
    // @@protoc_insertion_point(field:proxy_reencyption.proto.TransformObject.ephemeral_public_key)
    pub ephemeral_public_key: ::protobuf::MessageField<PublicKey>,
    // @@protoc_insertion_point(field:proxy_reencyption.proto.TransformObject.encrypted_message)
    pub encrypted_message: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:proxy_reencyption.proto.TransformObject.auth_hash)
    pub auth_hash: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:proxy_reencyption.proto.TransformObject.transform_blocks)
    pub transform_blocks: ::protobuf::MessageField<TransformBlock>,
    // @@protoc_insertion_point(field:proxy_reencyption.proto.TransformObject.public_signing_key)
    pub public_signing_key: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:proxy_reencyption.proto.TransformObject.ed25519_signature)
    pub ed25519_signature: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:proxy_reencyption.proto.TransformObject.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TransformObject {
    fn default() -> &'a TransformObject {
        <TransformObject as ::protobuf::Message>::default_instance()
    }
}

impl TransformObject {
    pub fn new() -> TransformObject {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, PublicKey>(
            "ephemeral_public_key",
            |m: &TransformObject| { &m.ephemeral_public_key },
            |m: &mut TransformObject| { &mut m.ephemeral_public_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "encrypted_message",
            |m: &TransformObject| { &m.encrypted_message },
            |m: &mut TransformObject| { &mut m.encrypted_message },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "auth_hash",
            |m: &TransformObject| { &m.auth_hash },
            |m: &mut TransformObject| { &mut m.auth_hash },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, TransformBlock>(
            "transform_blocks",
            |m: &TransformObject| { &m.transform_blocks },
            |m: &mut TransformObject| { &mut m.transform_blocks },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "public_signing_key",
            |m: &TransformObject| { &m.public_signing_key },
            |m: &mut TransformObject| { &mut m.public_signing_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ed25519_signature",
            |m: &TransformObject| { &m.ed25519_signature },
            |m: &mut TransformObject| { &mut m.ed25519_signature },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TransformObject>(
            "TransformObject",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TransformObject {
    const NAME: &'static str = "TransformObject";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.ephemeral_public_key)?;
                },
                18 => {
                    self.encrypted_message = is.read_bytes()?;
                },
                26 => {
                    self.auth_hash = is.read_bytes()?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.transform_blocks)?;
                },
                42 => {
                    self.public_signing_key = is.read_bytes()?;
                },
                50 => {
                    self.ed25519_signature = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.ephemeral_public_key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.encrypted_message.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.encrypted_message);
        }
        if !self.auth_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.auth_hash);
        }
        if let Some(v) = self.transform_blocks.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.public_signing_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.public_signing_key);
        }
        if !self.ed25519_signature.is_empty() {
            my_size += ::protobuf::rt::bytes_size(6, &self.ed25519_signature);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.ephemeral_public_key.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.encrypted_message.is_empty() {
            os.write_bytes(2, &self.encrypted_message)?;
        }
        if !self.auth_hash.is_empty() {
            os.write_bytes(3, &self.auth_hash)?;
        }
        if let Some(v) = self.transform_blocks.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if !self.public_signing_key.is_empty() {
            os.write_bytes(5, &self.public_signing_key)?;
        }
        if !self.ed25519_signature.is_empty() {
            os.write_bytes(6, &self.ed25519_signature)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TransformObject {
        TransformObject::new()
    }

    fn clear(&mut self) {
        self.ephemeral_public_key.clear();
        self.encrypted_message.clear();
        self.auth_hash.clear();
        self.transform_blocks.clear();
        self.public_signing_key.clear();
        self.ed25519_signature.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TransformObject {
        static instance: TransformObject = TransformObject {
            ephemeral_public_key: ::protobuf::MessageField::none(),
            encrypted_message: ::std::vec::Vec::new(),
            auth_hash: ::std::vec::Vec::new(),
            transform_blocks: ::protobuf::MessageField::none(),
            public_signing_key: ::std::vec::Vec::new(),
            ed25519_signature: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TransformObject {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TransformObject").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TransformObject {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransformObject {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proxy_reencyption.proto.TransformBlock)
pub struct TransformBlock {
    // message fields
    // @@protoc_insertion_point(field:proxy_reencyption.proto.TransformBlock.public_key)
    pub public_key: ::protobuf::MessageField<PublicKey>,
    // @@protoc_insertion_point(field:proxy_reencyption.proto.TransformBlock.encrypted_temp_key)
    pub encrypted_temp_key: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:proxy_reencyption.proto.TransformBlock.random_transform_public_key)
    pub random_transform_public_key: ::protobuf::MessageField<PublicKey>,
    // @@protoc_insertion_point(field:proxy_reencyption.proto.TransformBlock.encrypted_random_transform_temp_key)
    pub encrypted_random_transform_temp_key: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:proxy_reencyption.proto.TransformBlock.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TransformBlock {
    fn default() -> &'a TransformBlock {
        <TransformBlock as ::protobuf::Message>::default_instance()
    }
}

impl TransformBlock {
    pub fn new() -> TransformBlock {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, PublicKey>(
            "public_key",
            |m: &TransformBlock| { &m.public_key },
            |m: &mut TransformBlock| { &mut m.public_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "encrypted_temp_key",
            |m: &TransformBlock| { &m.encrypted_temp_key },
            |m: &mut TransformBlock| { &mut m.encrypted_temp_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, PublicKey>(
            "random_transform_public_key",
            |m: &TransformBlock| { &m.random_transform_public_key },
            |m: &mut TransformBlock| { &mut m.random_transform_public_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "encrypted_random_transform_temp_key",
            |m: &TransformBlock| { &m.encrypted_random_transform_temp_key },
            |m: &mut TransformBlock| { &mut m.encrypted_random_transform_temp_key },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TransformBlock>(
            "TransformBlock",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TransformBlock {
    const NAME: &'static str = "TransformBlock";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.public_key)?;
                },
                18 => {
                    self.encrypted_temp_key = is.read_bytes()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.random_transform_public_key)?;
                },
                34 => {
                    self.encrypted_random_transform_temp_key = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.public_key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.encrypted_temp_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.encrypted_temp_key);
        }
        if let Some(v) = self.random_transform_public_key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.encrypted_random_transform_temp_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.encrypted_random_transform_temp_key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.public_key.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.encrypted_temp_key.is_empty() {
            os.write_bytes(2, &self.encrypted_temp_key)?;
        }
        if let Some(v) = self.random_transform_public_key.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if !self.encrypted_random_transform_temp_key.is_empty() {
            os.write_bytes(4, &self.encrypted_random_transform_temp_key)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TransformBlock {
        TransformBlock::new()
    }

    fn clear(&mut self) {
        self.public_key.clear();
        self.encrypted_temp_key.clear();
        self.random_transform_public_key.clear();
        self.encrypted_random_transform_temp_key.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TransformBlock {
        static instance: TransformBlock = TransformBlock {
            public_key: ::protobuf::MessageField::none(),
            encrypted_temp_key: ::std::vec::Vec::new(),
            random_transform_public_key: ::protobuf::MessageField::none(),
            encrypted_random_transform_temp_key: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TransformBlock {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TransformBlock").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TransformBlock {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransformBlock {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proxy_reencyption.proto.EncryptedMessage)
pub struct EncryptedMessage {
    // message fields
    // @@protoc_insertion_point(field:proxy_reencyption.proto.EncryptedMessage.encrypted_message)
    pub encrypted_message: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:proxy_reencyption.proto.EncryptedMessage.ephemeral_public_key)
    pub ephemeral_public_key: ::protobuf::MessageField<PublicKey>,
    // @@protoc_insertion_point(field:proxy_reencyption.proto.EncryptedMessage.ed25519_signature)
    pub ed25519_signature: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:proxy_reencyption.proto.EncryptedMessage.auth_hash)
    pub auth_hash: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:proxy_reencyption.proto.EncryptedMessage.public_signing_key)
    pub public_signing_key: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:proxy_reencyption.proto.EncryptedMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EncryptedMessage {
    fn default() -> &'a EncryptedMessage {
        <EncryptedMessage as ::protobuf::Message>::default_instance()
    }
}

impl EncryptedMessage {
    pub fn new() -> EncryptedMessage {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "encrypted_message",
            |m: &EncryptedMessage| { &m.encrypted_message },
            |m: &mut EncryptedMessage| { &mut m.encrypted_message },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, PublicKey>(
            "ephemeral_public_key",
            |m: &EncryptedMessage| { &m.ephemeral_public_key },
            |m: &mut EncryptedMessage| { &mut m.ephemeral_public_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ed25519_signature",
            |m: &EncryptedMessage| { &m.ed25519_signature },
            |m: &mut EncryptedMessage| { &mut m.ed25519_signature },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "auth_hash",
            |m: &EncryptedMessage| { &m.auth_hash },
            |m: &mut EncryptedMessage| { &mut m.auth_hash },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "public_signing_key",
            |m: &EncryptedMessage| { &m.public_signing_key },
            |m: &mut EncryptedMessage| { &mut m.public_signing_key },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EncryptedMessage>(
            "EncryptedMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EncryptedMessage {
    const NAME: &'static str = "EncryptedMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.encrypted_message = is.read_bytes()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.ephemeral_public_key)?;
                },
                26 => {
                    self.ed25519_signature = is.read_bytes()?;
                },
                34 => {
                    self.auth_hash = is.read_bytes()?;
                },
                42 => {
                    self.public_signing_key = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.encrypted_message.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.encrypted_message);
        }
        if let Some(v) = self.ephemeral_public_key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.ed25519_signature.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.ed25519_signature);
        }
        if !self.auth_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.auth_hash);
        }
        if !self.public_signing_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.public_signing_key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.encrypted_message.is_empty() {
            os.write_bytes(1, &self.encrypted_message)?;
        }
        if let Some(v) = self.ephemeral_public_key.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if !self.ed25519_signature.is_empty() {
            os.write_bytes(3, &self.ed25519_signature)?;
        }
        if !self.auth_hash.is_empty() {
            os.write_bytes(4, &self.auth_hash)?;
        }
        if !self.public_signing_key.is_empty() {
            os.write_bytes(5, &self.public_signing_key)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EncryptedMessage {
        EncryptedMessage::new()
    }

    fn clear(&mut self) {
        self.encrypted_message.clear();
        self.ephemeral_public_key.clear();
        self.ed25519_signature.clear();
        self.auth_hash.clear();
        self.public_signing_key.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EncryptedMessage {
        static instance: EncryptedMessage = EncryptedMessage {
            encrypted_message: ::std::vec::Vec::new(),
            ephemeral_public_key: ::protobuf::MessageField::none(),
            ed25519_signature: ::std::vec::Vec::new(),
            auth_hash: ::std::vec::Vec::new(),
            public_signing_key: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EncryptedMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EncryptedMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EncryptedMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EncryptedMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0ftransform.proto\x12\x0fproxy_reencyption.proto\"'\n\tPublicKey\x12\x0c\n\
    \x01x\x18\x01\x20\x01(\x0cR\x01x\x12\x0c\n\x01y\x18\x02\x20\x01(\x0cR\
    \x01y\"\xd0\x02\n\x0fTransformObject\x12L\n\x14ephemeral_public_key\x18\
    \x01\x20\x01(\x0b2\x1a.proxy_reencyption.proto.PublicKeyR\x12ephemeralPublicKey\
    \x12+\n\x11encrypted_message\x18\x02\x20\x01(\x0cR\x10encryptedMessage\
    \x12\x1b\n\tauth_hash\x18\x03\x20\x01(\x0cR\x08authHash\x12J\n\x10transf\
    orm_blocks\x18\x04\x20\x01(\x0b2\x1f.proxy_reencyption.proto.TransformBlockR\x0f\
    transformBlocks\x12,\n\x12public_signing_key\x18\x05\x20\x01(\x0cR\x10pu\
    blicSigningKey\x12+\n\x11ed25519_signature\x18\x06\x20\x01(\x0cR\x10ed25\
    519Signature\"\xa2\x02\n\x0eTransformBlock\x129\n\npublic_key\x18\x01\
    \x20\x01(\x0b2\x1a.proxy_reencyption.proto.PublicKeyR\tpublicKey\x12,\n\x12encry\
    pted_temp_key\x18\x02\x20\x01(\x0cR\x10encryptedTempKey\x12Y\n\x1brandom\
    _transform_public_key\x18\x03\x20\x01(\x0b2\x1a.proxy_reencyption.proto.PublicKe\
    yR\x18randomTransformPublicKey\x12L\n#encrypted_random_transform_temp_ke\
    y\x18\x04\x20\x01(\x0cR\x1fencryptedRandomTransformTempKey\"\x85\x02\n\
    \x10EncryptedMessage\x12+\n\x11encrypted_message\x18\x01\x20\x01(\x0cR\
    \x10encryptedMessage\x12L\n\x14ephemeral_public_key\x18\x02\x20\x01(\x0b\
    2\x1a.proxy_reencyption.proto.PublicKeyR\x12ephemeralPublicKey\x12+\n\x11ed25519\
    _signature\x18\x03\x20\x01(\x0cR\x10ed25519Signature\x12\x1b\n\tauth_has\
    h\x18\x04\x20\x01(\x0cR\x08authHash\x12,\n\x12public_signing_key\x18\x05\
    \x20\x01(\x0cR\x10publicSigningKeyJ\xa2\n\n\x06\x12\x04\0\0\x20\x01\n\
    \x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\x08\x17\n\n\n\
    \x02\x04\0\x12\x04\x04\0\x07\x01\n\n\n\x03\x04\0\x01\x12\x03\x04\x08\x11\
    \n\x0b\n\x04\x04\0\x02\0\x12\x03\x05\x02\x0e\n\r\n\x05\x04\0\x02\0\x04\
    \x12\x04\x05\x02\x04\x13\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x05\x02\x07\
    \n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x05\x08\t\n\x0c\n\x05\x04\0\x02\0\
    \x03\x12\x03\x05\x0c\r\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x06\x02\x0e\n\r\
    \n\x05\x04\0\x02\x01\x04\x12\x04\x06\x02\x05\x0e\n\x0c\n\x05\x04\0\x02\
    \x01\x05\x12\x03\x06\x02\x07\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x06\
    \x08\t\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x06\x0c\r\n\n\n\x02\x04\x01\
    \x12\x04\n\0\x11\x01\n\n\n\x03\x04\x01\x01\x12\x03\n\x08\x17\n\x0b\n\x04\
    \x04\x01\x02\0\x12\x03\x0b\x02%\n\r\n\x05\x04\x01\x02\0\x04\x12\x04\x0b\
    \x02\n\x19\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03\x0b\x02\x0b\n\x0c\n\x05\
    \x04\x01\x02\0\x01\x12\x03\x0b\x0c\x20\n\x0c\n\x05\x04\x01\x02\0\x03\x12\
    \x03\x0b#$\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x0c\x02\x1e\n\r\n\x05\x04\
    \x01\x02\x01\x04\x12\x04\x0c\x02\x0b%\n\x0c\n\x05\x04\x01\x02\x01\x05\
    \x12\x03\x0c\x02\x07\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x0c\x08\x19\
    \n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x0c\x1c\x1d\n\x0b\n\x04\x04\x01\
    \x02\x02\x12\x03\r\x02\x16\n\r\n\x05\x04\x01\x02\x02\x04\x12\x04\r\x02\
    \x0c\x1e\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\r\x02\x07\n\x0c\n\x05\
    \x04\x01\x02\x02\x01\x12\x03\r\x08\x11\n\x0c\n\x05\x04\x01\x02\x02\x03\
    \x12\x03\r\x14\x15\n\x0b\n\x04\x04\x01\x02\x03\x12\x03\x0e\x02&\n\r\n\
    \x05\x04\x01\x02\x03\x04\x12\x04\x0e\x02\r\x16\n\x0c\n\x05\x04\x01\x02\
    \x03\x06\x12\x03\x0e\x02\x10\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03\x0e\
    \x11!\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03\x0e$%\n\x0b\n\x04\x04\x01\
    \x02\x04\x12\x03\x0f\x02\x1e\n\r\n\x05\x04\x01\x02\x04\x04\x12\x04\x0f\
    \x02\x0e&\n\x0c\n\x05\x04\x01\x02\x04\x05\x12\x03\x0f\x02\x07\n\x0c\n\
    \x05\x04\x01\x02\x04\x01\x12\x03\x0f\x08\x1a\n\x0c\n\x05\x04\x01\x02\x04\
    \x03\x12\x03\x0f\x1c\x1d\n\x0b\n\x04\x04\x01\x02\x05\x12\x03\x10\x02\x1e\
    \n\r\n\x05\x04\x01\x02\x05\x04\x12\x04\x10\x02\x0f\x1e\n\x0c\n\x05\x04\
    \x01\x02\x05\x05\x12\x03\x10\x02\x07\n\x0c\n\x05\x04\x01\x02\x05\x01\x12\
    \x03\x10\x08\x19\n\x0c\n\x05\x04\x01\x02\x05\x03\x12\x03\x10\x1c\x1d\n\n\
    \n\x02\x04\x02\x12\x04\x13\0\x18\x01\n\n\n\x03\x04\x02\x01\x12\x03\x13\
    \x08\x16\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x14\x02\x1b\n\r\n\x05\x04\x02\
    \x02\0\x04\x12\x04\x14\x02\x13\x18\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03\
    \x14\x02\x0b\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x14\x0c\x16\n\x0c\n\
    \x05\x04\x02\x02\0\x03\x12\x03\x14\x19\x1a\n\x0b\n\x04\x04\x02\x02\x01\
    \x12\x03\x15\x02\x1f\n\r\n\x05\x04\x02\x02\x01\x04\x12\x04\x15\x02\x14\
    \x1b\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03\x15\x02\x07\n\x0c\n\x05\x04\
    \x02\x02\x01\x01\x12\x03\x15\x08\x1a\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\
    \x03\x15\x1d\x1e\n\x0b\n\x04\x04\x02\x02\x02\x12\x03\x16\x02,\n\r\n\x05\
    \x04\x02\x02\x02\x04\x12\x04\x16\x02\x15\x1f\n\x0c\n\x05\x04\x02\x02\x02\
    \x06\x12\x03\x16\x02\x0b\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03\x16\x0c\
    '\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03\x16*+\n\x0b\n\x04\x04\x02\x02\
    \x03\x12\x03\x17\x020\n\r\n\x05\x04\x02\x02\x03\x04\x12\x04\x17\x02\x16,\
    \n\x0c\n\x05\x04\x02\x02\x03\x05\x12\x03\x17\x02\x07\n\x0c\n\x05\x04\x02\
    \x02\x03\x01\x12\x03\x17\x08+\n\x0c\n\x05\x04\x02\x02\x03\x03\x12\x03\
    \x17./\n\n\n\x02\x04\x03\x12\x04\x1a\0\x20\x01\n\n\n\x03\x04\x03\x01\x12\
    \x03\x1a\x08\x18\n\x0b\n\x04\x04\x03\x02\0\x12\x03\x1b\x02\x1e\n\r\n\x05\
    \x04\x03\x02\0\x04\x12\x04\x1b\x02\x1a\x1a\n\x0c\n\x05\x04\x03\x02\0\x05\
    \x12\x03\x1b\x02\x07\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03\x1b\x08\x19\n\
    \x0c\n\x05\x04\x03\x02\0\x03\x12\x03\x1b\x1c\x1d\n\x0b\n\x04\x04\x03\x02\
    \x01\x12\x03\x1c\x02%\n\r\n\x05\x04\x03\x02\x01\x04\x12\x04\x1c\x02\x1b\
    \x1e\n\x0c\n\x05\x04\x03\x02\x01\x06\x12\x03\x1c\x02\x0b\n\x0c\n\x05\x04\
    \x03\x02\x01\x01\x12\x03\x1c\x0c\x20\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\
    \x03\x1c#$\n\x0b\n\x04\x04\x03\x02\x02\x12\x03\x1d\x02\x1e\n\r\n\x05\x04\
    \x03\x02\x02\x04\x12\x04\x1d\x02\x1c%\n\x0c\n\x05\x04\x03\x02\x02\x05\
    \x12\x03\x1d\x02\x07\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x03\x1d\x08\x19\
    \n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03\x1d\x1c\x1d\n\x0b\n\x04\x04\x03\
    \x02\x03\x12\x03\x1e\x02\x16\n\r\n\x05\x04\x03\x02\x03\x04\x12\x04\x1e\
    \x02\x1d\x1e\n\x0c\n\x05\x04\x03\x02\x03\x05\x12\x03\x1e\x02\x07\n\x0c\n\
    \x05\x04\x03\x02\x03\x01\x12\x03\x1e\x08\x11\n\x0c\n\x05\x04\x03\x02\x03\
    \x03\x12\x03\x1e\x14\x15\n\x0b\n\x04\x04\x03\x02\x04\x12\x03\x1f\x02\x1f\
    \n\r\n\x05\x04\x03\x02\x04\x04\x12\x04\x1f\x02\x1e\x16\n\x0c\n\x05\x04\
    \x03\x02\x04\x05\x12\x03\x1f\x02\x07\n\x0c\n\x05\x04\x03\x02\x04\x01\x12\
    \x03\x1f\x08\x1a\n\x0c\n\x05\x04\x03\x02\x04\x03\x12\x03\x1f\x1d\x1eb\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(PublicKey::generated_message_descriptor_data());
            messages.push(TransformObject::generated_message_descriptor_data());
            messages.push(TransformBlock::generated_message_descriptor_data());
            messages.push(EncryptedMessage::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
